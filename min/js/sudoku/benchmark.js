import{REPORT_PROD_WORKER_URL}from"./constants.js";let workerBlobURL;async function fetchScript(e){e=await fetch(e).then(e=>e.text());return URL.createObjectURL(new Blob([e],{type:"application/javascript"}))}let resolveFunction;async function createSudokuWorker(){workerBlobURL??=await fetchScript(globalThis.debug?"./sudoku.worker.js":REPORT_PROD_WORKER_URL);var e=new Worker(workerBlobURL);return e.addEventListener("message",e=>{"result"==e.data.type&&(resolveFunction?.(e.data.payload),resolveFunction=void 0)}),e.addEventListener("error",e=>console.error("Worker:",e)),e}let sudokuWorker;async function runSudokuBenchmark(r,e=10){console.log("%c--- Starting Sudoku Benchmark ---","color: yellow; font-weight: bold;"),console.log(`Board Size: ${r}x${r}, Runs: `+e);var o,n,t,a=[];let l=Math.floor(r*r*.5);sudokuWorker??=await createSudokuWorker();for(let o=1;o<=e;o++)try{console.log(`Run ${o}/${e}...`);var c=performance.now(),s=(await new Promise(e=>{resolveFunction=e,sudokuWorker.postMessage({size:r,holes:l})}),performance.now()),i=s-c;a.push(i),console.log(`Run ${o} finished in ${i.toFixed(2)}ms`)}catch(e){console.error(`Run ${o} failed:`,e);break}return a.length<=0?console.log("%c--- Benchmark Canceled (no successful runs) ---","color: red;"):(o=a.reduce((e,o)=>e+o,0)/a.length,n=Math.min(...a),t=Math.max(...a),console.log("%c--- Benchmark Finished ---","color: yellow; font-weight: bold;"),console.table({"Board Size":r+"x"+r,"Total Runs":a.length,"Average Time (ms)":o.toFixed(2),"Min Time (ms)":n.toFixed(2),"Max Time (ms)":t.toFixed(2)}),o)}export{runSudokuBenchmark};