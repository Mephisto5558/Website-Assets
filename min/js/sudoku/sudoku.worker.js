(globalThis.window=globalThis).importScripts("https://cdn.jsdelivr.net/gh/nastyox/Rando.js@master/code/plain-javascript/2.0.0/rando-min.js");let DEBUG_BOARDS={board:[[6,5,8,4,2,0,0,0,0],[0,2,3,7,0,0,4,0,0],[4,1,7,6,0,9,0,0,5],[0,0,6,8,0,5,7,4,2],[0,9,2,3,0,7,5,6,1],[7,4,5,1,6,2,9,0,8],[0,0,1,5,0,4,2,8,0],[0,7,0,9,8,0,0,5,0],[5,0,9,2,0,3,6,0,4]],fullBoard:[[6,5,8,4,2,1,3,9,7],[9,2,3,7,5,8,4,1,6],[4,1,7,6,3,9,8,2,5],[1,3,6,8,9,5,7,4,2],[8,9,2,3,4,7,5,6,1],[7,4,5,1,6,2,9,3,8],[3,6,1,5,7,4,2,8,9],[2,7,4,9,8,6,1,5,3],[5,8,9,2,1,3,6,7,4]]},THROTTLE_INTERVAL_MS=500;function getGroupId(e,r,t){return Math.floor(e/t)*t+Math.floor(r/t)}let lastProgressTimestamp;function sendProgress(e){var r=Date.now();if(!(r<=lastProgressTimestamp+THROTTLE_INTERVAL_MS))return lastProgressTimestamp=r,globalThis.postMessage({type:"progress",message:e})}function solver(d,{findJustOne:i=!0,useRandomSequence:u=!0}={}){let f=d.length,h=Math.sqrt(f),m=Array.from({length:f},()=>new Set),p=Array.from({length:f},()=>new Set),S=Array.from({length:f},()=>new Set);for(let r=0;r<f;r++)for(let e=0;e<f;e++){var t=d[r][e];0!==t&&(m[r].add(t),p[e].add(t),S[getGroupId(r,e,h)].add(t))}var e=function e(r=0,t=0){if(r>=f)return 1;var[o,n]=t===f-1?[r+1,0]:[r,t+1];if(0!==d[r][t])return e(o,n);sendProgress(`Generating row ${r.toString().padStart(d.length.toString().length,"0")}/${d.length}, column ${t.toString().padStart(d.length.toString().length,"0")}/`+d.length);var a,s=getGroupId(r,t,h);let l=0;for(a of u?randoSequence(1,f):Array.from({length:f},(e,r)=>r+1))if(!(m[r].has(a)||p[t].has(a)||S[s].has(a))){d[r][t]=a,m[r].add(a),p[t].add(a),S[s].add(a);var g=e(o,n);if(i){if(0<g)return l+g}else if(1<(l+=g))return m[r].delete(a),p[t].delete(a),S[s].delete(a),d[r][t]=0,l;m[r].delete(a),p[t].delete(a),S[s].delete(a),d[r][t]=0}return l}();return i?0<e:e}function dig(e){var r,t=rando(0,e.length-1),o=rando(0,e.length-1);if(e[t][o])return r=e[t][o],e[t][o]=0,!(1<solver(structuredClone(e),{findJustOne:!1,useRandomSequence:!1})&&(e[t][o]=r,1))}function getEmptySudoku(e,r=0){return Array.from({length:e},()=>Array.from({length:e},()=>r))}function generateSudoku(e,r){if(globalThis.debugBoard)return DEBUG_BOARDS;var t=Math.sqrt(e);if(!Number.isInteger(t))throw new Error("Size must be quadratic.");sendProgress("Generating initial full Sudoku. Size: "+e);var t=performance.now(),o=getEmptySudoku(e);let n=solver(o,{findJustOne:!0,useRandomSequence:!0});if(!n)return globalThis.postMessage({type:"error",message:"Failed to generate a valid Sudoku board."}),{fullBoard:getEmptySudoku(e),board:getEmptySudoku(e)};globalThis.postMessage({type:"debug",message:`Took ${performance.now()-t}ms to generate.`});var a=structuredClone(o),s=e**2*3,l=e**2;sendProgress("Starting to dig holes. Holes to dig: "+r);let g=0,d=0,i=0;for(;g<r&&d<s&&i<l;d++){sendProgress(`Digging. Holes: ${g}/${r}, Attempts: ${d}/${s}, Consecutive attempts: ${i}/`+l);let e=dig(a);e?(i=0,g++):!1===e&&i++}return sendProgress(`Dug ${g}/${r} holes.`),{fullBoard:o,board:a}}globalThis.addEventListener("message",e=>{if(e.origin&&e.origin!==globalThis.origin)return console.warn(`Worker received a message from an untrusted origin: "${e.origin}". Ignoring.`);console.log("Worker: Task received from main thread.");var{size:e,holes:r,debugBoard:t}=e.data,t=(globalThis.debugBoard=t,generateSudoku(e,r));console.log("Worker: Task finished, posting result back."),globalThis.postMessage({type:"result",payload:t})});