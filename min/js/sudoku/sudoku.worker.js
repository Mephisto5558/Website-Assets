(globalThis.window=globalThis).importScripts("https://cdn.jsdelivr.net/gh/nastyox/Rando.js@master/code/plain-javascript/2.0.0/rando-min.js");let THROTTLE_INTERVAL_MS=500,lastProgressTimestamp=0;function sendProgress(e){var r=Date.now();r<=lastProgressTimestamp+THROTTLE_INTERVAL_MS||(lastProgressTimestamp=r,globalThis.postMessage({type:"progress",message:e}))}function getGroupId(e,r,o){return Math.floor(e/o)*o+Math.floor(r/o)}function backtrackSolver(l,e={}){let{findJustOne:g=!0,useRandomSequence:i=!0}=e,u=l.length,f=Math.sqrt(u),c=Array.from({length:u},()=>new Set),m=Array.from({length:u},()=>new Set),h=Array.from({length:u},()=>new Set),p=[];for(let r=0;r<u;r++)for(let e=0;e<u;e++){var o,t=l[r][e];0===t?p.push({rowId:r,colId:e}):(o=getGroupId(r,e,f),c[r].add(t),m[e].add(t),h[o].add(t))}return function e(r){if(r>=p.length)return 1;var o,{rowId:t,colId:a}=p[r],n=getGroupId(t,a,f);let s=0;for(o of i?randoSequence(1,u):Array.from({length:u},(e,r)=>r+1))if(!c[t].has(o)&&!m[a].has(o)&&!h[n].has(o)){l[t][a]=o,c[t].add(o),m[a].add(o),h[n].add(o);var d=e(r+1);if(g){if(0<d)return d}else if(1<(s+=d))return c[t].delete(o),m[a].delete(o),h[n].delete(o),l[t][a]=0,s;c[t].delete(o),m[a].delete(o),h[n].delete(o),l[t][a]=0}return s}(0)}function dig(o){var e,r,t=o.length,a=[];for(let r=0;r<t;r++)for(let e=0;e<t;e++)0!==o[r][e]&&a.push({rowId:r,colId:e});for({rowId:e,colId:r}of randoSequence(a).map(e=>e.value)){var n=o[e][r],s=(o[e][r]=0,backtrackSolver(structuredClone(o),{findJustOne:!1,useRandomSequence:!1}));if(!(1<s))return!0;o[e][r]=n}return!1}function getEmptySudoku(e,r=0){return Array.from({length:e},()=>Array.from({length:e},()=>r))}function generateSudoku(e,r){sendProgress("Generating initial full Sudoku. Size: "+e);var o=performance.now(),t=getEmptySudoku(e);if(!(0<backtrackSolver(t,{findJustOne:!0,useRandomSequence:!0})))return globalThis.postMessage({type:"error",message:"Failed to generate a valid Sudoku board."}),{fullBoard:getEmptySudoku(e),board:getEmptySudoku(e)};globalThis.postMessage({type:"debug",message:`Took ${performance.now()-o}ms to generate.`});var a=structuredClone(t),n=e**2;sendProgress("Starting to dig holes. Holes to dig: "+r);let s=0;for(let e=0;s<r&&e<n;e++)sendProgress(`Digging. Holes: ${s}/`+r),dig(a)&&s++;return sendProgress(`Dug ${s}/${r} holes.`),{fullBoard:t,board:a}}globalThis.addEventListener("message",e=>{if(e.origin&&e.origin!==globalThis.origin)return console.warn(`Worker received a message from an untrusted origin: "${e.origin}". Ignoring.`);console.log("Worker: Task received from main thread.");var{size:e,holes:r,debugBoard:o}=e.data,o=(globalThis.debugBoard=o,generateSudoku(e,r));console.log("Worker: Task finished, posting result back."),globalThis.postMessage({type:"result",payload:o})});