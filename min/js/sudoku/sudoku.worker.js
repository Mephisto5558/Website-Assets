(globalThis.window=globalThis).importScripts("https://cdn.jsdelivr.net/gh/nastyox/Rando.js@master/code/plain-javascript/2.0.0/rando-min.js");let DEBUG_BOARDS={board:[[6,5,8,4,2,0,0,0,0],[0,2,3,7,0,0,4,0,0],[4,1,7,6,0,9,0,0,5],[0,0,6,8,0,5,7,4,2],[0,9,2,3,0,7,5,6,1],[7,4,5,1,6,2,9,0,8],[0,0,1,5,0,4,2,8,0],[0,7,0,9,8,0,0,5,0],[5,0,9,2,0,3,6,0,4]],fullBoard:[[6,5,8,4,2,1,3,9,7],[9,2,3,7,5,8,4,1,6],[4,1,7,6,3,9,8,2,5],[1,3,6,8,9,5,7,4,2],[8,9,2,3,4,7,5,6,1],[7,4,5,1,6,2,9,3,8],[3,6,1,5,7,4,2,8,9],[2,7,4,9,8,6,1,5,3],[5,8,9,2,1,3,6,7,4]]};function getGroupId(e,r,o){return Math.floor(e/o)*o+Math.floor(r/o)}function solver(i,{findJustOne:d=!0,useRandomSequence:u=!0}={}){let f=i.length,h=Math.sqrt(f),p=Array.from({length:f},()=>new Set),m=Array.from({length:f},()=>new Set),c=Array.from({length:f},()=>new Set);for(let r=0;r<f;r++)for(let e=0;e<f;e++){var o=i[r][e];0!==o&&(p[r].add(o),m[e].add(o),c[getGroupId(r,e,h)].add(o))}var e=function e(r=0,o=0){if(r>=f)return 1;var[t,a]=o===f-1?[r+1,0]:[r,o+1];if(0!==i[r][o])return e(t,a);var s,n=getGroupId(r,o,h);let l=0;for(s of u?randoSequence(1,f):Array.from({length:f},(e,r)=>r+1))if(!(p[r].has(s)||m[o].has(s)||c[n].has(s))){i[r][o]=s,p[r].add(s),m[o].add(s),c[n].add(s);var g=e(t,a);if(d){if(0<g)return l+g}else if(1<(l+=g))return p[r].delete(s),m[o].delete(s),c[n].delete(s),i[r][o]=0,l;p[r].delete(s),m[o].delete(s),c[n].delete(s),i[r][o]=0}return l}();return d?0<e:e}function dig(e){var r,o=rando(0,e.length-1),t=rando(0,e.length-1);if(e[o][t])return r=e[o][t],e[o][t]=0,!(1<solver(structuredClone(e),{findJustOne:!1,useRandomSequence:!1})&&(e[o][t]=r,1))}function getEmptySudoku(e,r=0){return Array.from({length:e},()=>Array.from({length:e},()=>r))}function generateSudoku(e,r){if(globalThis.debugBoard)return DEBUG_BOARDS;var o=Math.sqrt(e);if(!Number.isInteger(o))throw new Error("Size must be quadratic.");globalThis.postMessage({type:"progress",message:"Generating initial full Sudoku. Size: "+e});var o=performance.now(),t=getEmptySudoku(e);let a=solver(t,{findJustOne:!0,useRandomSequence:!0});if(!a)return globalThis.postMessage({type:"error",message:"Failed to generate a valid Sudoku board."}),{fullBoard:getEmptySudoku(e),board:getEmptySudoku(e)};globalThis.postMessage({type:"debug",message:`Took ${performance.now()-o}ms to generate.`});var s=structuredClone(t),n=e**2*3,l=e**2;globalThis.postMessage({type:"progress",message:"Starting to dig holes. Holes to dig: "+r});let g=0,i=0,d=0;for(;g<r&&i<n&&d<l;i++){globalThis.postMessage({type:"progress",message:`Digging. Holes: ${g}/${r}, Attempts: ${i}/${n}, Consecutive attempts: ${d}/`+l});let e=dig(s);e?(d=0,g++):!1===e&&d++}return globalThis.postMessage({type:"progress",message:`Dug ${g}/${r} holes.`}),{fullBoard:t,board:s}}globalThis.addEventListener("message",e=>{if(e.origin&&e.origin!==globalThis.origin)return console.warn(`Worker received a message from an untrusted origin: "${e.origin}". Ignoring.`);console.log("Worker: Task received from main thread.");var{size:e,holes:r,debugBoard:o}=e.data,o=(globalThis.debugBoard=o,generateSudoku(e,r));console.log("Worker: Task finished, posting result back."),globalThis.postMessage({type:"result",payload:o})});