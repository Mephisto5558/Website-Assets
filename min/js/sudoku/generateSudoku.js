let MAX_FULL_RETRIES=100;async function generateSudoku(e,t,r=1){var o=Math.sqrt(e);if(!Number.isInteger(o))throw new Error("Size must be quadratic.");if(globalThis.debug&&globalThis.debugBoard)return{board:[[6,5,8,4,2,0,0,0,0],[0,2,3,7,0,0,4,0,0],[4,1,7,6,0,9,0,0,5],[0,0,6,8,0,5,7,4,2],[0,9,2,3,0,7,5,6,1],[7,4,5,1,6,2,9,0,8],[0,0,1,5,0,4,2,8,0],[0,7,0,9,8,0,0,5,0],[5,0,9,2,0,3,6,0,4]].map(e=>e.map(e=>e||void 0)),fullBoard:[[6,5,8,4,2,1,3,9,7],[9,2,3,7,5,8,4,1,6],[4,1,7,6,3,9,8,2,5],[1,3,6,8,9,5,7,4,2],[8,9,2,3,4,7,5,6,1],[7,4,5,1,6,2,9,3,8],[3,6,1,5,7,4,2,8,9],[2,7,4,9,8,6,1,5,3],[5,8,9,2,1,3,6,7,4]]};console.debug(`Generating initial full Sudoku. Try ${r}/`+MAX_FULL_RETRIES);var n=Array.from({length:e},()=>Array.from({length:e}));if(fill(n,o),!countSolutions(structuredClone(n),o))return console.error("An invalid Sudoku has been generated. "+(r<MAX_FULL_RETRIES?`Retrying ${r+1}/`+MAX_FULL_RETRIES:"Max retry reached. Not retrying.")),globalThis.debug?(console.error(JSON.stringify(n)),n):r<MAX_FULL_RETRIES?generateSudoku(e,t,r+1):(console.error(JSON.stringify(n)),Array.from({length:e},()=>Array.from({length:e},()=>0)));var a=structuredClone(n),u=e**2*5,l=e**2;console.debug("Starting to dig holes. Max Attempts: "+u);let i=0,s=0,d=0;for(;i<t&&s<u&&d<l;s++){console.debug(`Digging. Holes: ${i}/${t}, Attempts: ${s}/${u}, Consecutive attempts: ${d}/`+l);var g=rando(0,e-1),f=rando(0,e-1);if(a[g][f]){var c=structuredClone(a),c=(c[g][f]=void 0,countSolutions(c,o));if(1<c){let e,t="Sudoku has more than one possible solution. ";++d>l?t+="Max consecutive attempts reached. Not retrying.":s>u?t+="Max attempts reached. Not retrying.":(t+=`Retrying ${s+1}/${u}. Waiting 10ms`,e=new Promise(e=>setTimeout(e,10))),console.debug(t),await e}else a[g][f]=void 0,d=0,i++}}return console.debug(`Dug ${i}/${t} holes. Took ${s}/${u} attemepts (last consecutive attempts: ${d}/${l}).`),globalThis.debug&&(console.debug("Board:",JSON.stringify(a)),console.debug("Full Board:",JSON.stringify(n))),{fullBoard:n,board:a}}function fill(e,t,r=0,o=0){if(r>e.length-1)return!0;var n,[a,u]=o==e.length-1?[r+1,0]:[r,o+1];for(n of randoSequence(1,e.length))if(!isUnsafe(e,t,r,o,n)){if(e[r][o]=n,fill(e,t,a,u))return!0;e[r][o]=void 0}return!1}function countSolutions(t,r,o=0,n=0){if(o===t.length)return 1;var[a,u]=n===t.length-1?[o+1,0]:[o,n+1];if(t[o][n])return countSolutions(t,r,a,u);let l=0;for(let e=1;e<=t.length&&(isUnsafe(t,r,o,n,e)||(t[o][n]=e,l+=countSolutions(t,r,a,u),t[o][n]=void 0,!(1<l)));e++);return l}function isUnsafe(r,o,t,n,a){for(let e=0;e<r.length;e++)if(r[t][e]===a||r[e][n]===a)return!0;var u=Math.floor(t/o)*o,l=Math.floor(n/o)*o;for(let t=0;t<o;t++)for(let e=0;e<o;e++)if(r[u+t][l+e]===a)return!0;return!1}function getNumberAmounts(e){return e.flat().reduce((e,t)=>e.set(t,(e.get(t)??0)+1),new Map)}let numberOverviewSpans=document.querySelectorAll("#number-overview > tbody > tr > td > span");function displayBoard(e){for(var t of globalThis.htmlBoard.flat())t.value=e[Number(t.dataset.row)-1][Number(t.dataset.col)-1],t.disabled=!!e[Number(t.dataset.row)-1][Number(t.dataset.col)-1];for(var[r,o]of getNumberAmounts(e))r&&(numberOverviewSpans[r-1].textContent=o,globalThis.fullBoardNumberAmt.get(r)==o)&&numberOverviewSpans[r-1].classList.add("complete")}export{generateSudoku,getNumberAmounts,displayBoard};