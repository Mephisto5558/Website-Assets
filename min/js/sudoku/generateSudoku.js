import{DEBUG_BOARDS}from"./constants.js";import{getGroupId}from"./utils.js";function getNumberAmounts(e){return e.flat().reduce((e,t)=>e.set(t,(e.get(t)??0)+1),new Map)}function getEmptySudoku(e,t=0){return Array.from({length:e},()=>Array.from({length:e},()=>t))}function solve(r,o){var a=Math.sqrt(o),n=Array.from({length:o},()=>new Set),u=Array.from({length:o},()=>new Set),l=Array.from({length:o},()=>new Set),d=Array.from({length:o**2}),s=Array.from({length:o**2}).fill(0);let i=0;for(;0<=i&&i<o*o;){var f=Math.floor(i/o),c=i%o,m=getGroupId(f,c,a),g=(void 0===d[i]&&(d[i]=randoSequence(1,o),s[i]=0),r[f][c]);0!==g&&(n[f].delete(g),u[c].delete(g),l[m].delete(g));let e=!1,t=s[i]+1;for(;t<o;){var p=d[i][t];if(!n[f].has(p)&&!u[c].has(p)&&!l[m].has(p)){r[f][c]=p,n[f].add(p),u[c].add(p),l[m].add(p),s[i]=t,e=!0;break}t++}e?i++:(d[i]=void 0,r[f][c]=0,i--)}return 0<i}function createHTMLBoard(r){var o=Math.sqrt(r);if(!Number.isInteger(o))throw new Error("Size must be quadratic.");console.debug("Creating HTML board of size "+r);var a=document.querySelector("#sudoku");a.innerHTML="";for(let e=0;e<o;e++){var t=document.createElement("colgroup");for(let e=0;e<o;e++)t.append(document.createElement("col"));a.append(t)}for(let t=0;t<o;t++){var n=document.createElement("tbody");for(let e=0;e<o;e++){var u=document.createElement("tr"),l=t*o+e;for(let e=0;e<r;e++){var d=document.createElement("td"),s=document.createElement("input"),i=(s.type="number",s.required=!0,s.autocomplete="off",e);s.dataset.row=l+1,s.dataset.col=i+1,s.dataset.group=getGroupId(l,i,o)+1,s.ariaLabel=`Row ${l+1}, Column `+(i+1),d.append(s),u.append(d)}n.append(u)}a.append(n)}}function generateSudoku(e,t){if(globalThis.debugBoard)return DEBUG_BOARDS;var r=Math.sqrt(e);if(!Number.isInteger(r))throw new Error("Size must be quadratic.");console.debug("Generating initial full Sudoku. Size: "+e);var o=performance.now(),a=getEmptySudoku(e);let n=solve(a,e);if(!n)return console.error("Failed to generate a valid Sudoku board."),{fullBoard:getEmptySudoku(e),board:getEmptySudoku(e)};console.debug(`Took ${performance.now()-o}ms to generate.`);var u=structuredClone(a),l=e**2*3,d=e**2;console.debug("Starting to dig holes. Holes to dig: "+t);let s=0,i=0,f=0;for(;s<t&&i<l&&f<d;i++){console.debug(`Digging. Holes: ${s}/${t}, Attempts: ${i}/${l}, Consecutive attempts: ${f}/`+d);let e=dig(u,r);e?(f=0,s++):!1===e&&f++}return console.debug(`Dug ${s}/${t} holes.`),{fullBoard:a,board:u}}function dig(e,t){var r,o=rando(0,e.length-1),a=rando(0,e.length-1);if(e[o][a])return r=e[o][a],e[o][a]=0,!(1<countSolutions(structuredClone(e),t)&&(e[o][a]=r,1))}function countSolutions(t,r,o=0,a=0){var n=t.length;if(n<=o)return 1;let u,l;if([u,l]=o===n-1&&a===n-1?[o+1,a+1]:a===n-1?[o+1,0]:[o,a+1],t[o][a])return countSolutions(t,r,u,l);let d=0;for(let e=1;e<=n&&(isUnsafe(t,r,o,a,e)||(t[o][a]=e,d+=countSolutions(t,r,u,l),t[o][a]=0,!(1<d)));e++);return d}function isUnsafe(r,o,t,a,n){for(let e=0;e<r.length;e++)if(r[t][e]===n||r[e][a]===n)return!0;var e=Math.floor(t/o)*o,u=Math.floor(a/o)*o;for(let t=e;t<e+o;t++)for(let e=u;e<u+o;e++)if(r[t][e]===n)return!0;return!1}function displayBoard(e,t,r,o=!1){for(var a of t.flat())o||a.classList.remove("solution"),o&&!a.disabled&&(a.value&&(a.dataset.val=a.value),a.classList.add("solution")),a.value=e[Number(a.dataset.row)-1][Number(a.dataset.col)-1]||Number(a.dataset.val)||void 0,a.disabled=o||!!a.value&&!a.dataset.val,o||delete a.dataset.val;for(var[n,u]of getNumberAmounts(e))n&&r[n-1]&&(r[n-1].textContent=u,globalThis.fullBoardNumberAmt.get(n)==u)&&r[n-1].classList.add("complete")}export{getNumberAmounts,createHTMLBoard,generateSudoku,displayBoard};