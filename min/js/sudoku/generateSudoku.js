let MAX_FULL_RETRIES=100;function generateSudoku(e=9,t=e**2-20,r=1){var o=Math.sqrt(e);if(!Number.isInteger(o))throw new Error("Size must be quadratic.");console.debug(`Generating initial full Sudoku. Try ${r}/`+MAX_FULL_RETRIES);var n=Array.from({length:e},()=>Array.from({length:e}));if(fill(n,o),!countSolutions(structuredClone(n),o))return console.error("An invalid Sudoku has been generated. "+(r<MAX_FULL_RETRIES?`Retrying ${r+1}/`+MAX_FULL_RETRIES:"Max retry reached. Not retrying.")),globalThis.debug?(console.error(JSON.stringify(n)),n):r<MAX_FULL_RETRIES?generateSudoku(e,t,r+1):(console.error(JSON.stringify(n)),Array.from({length:e},()=>Array.from({length:e},()=>0)));var a=e**2*5,l=e**2;console.debug("Starting to dig holes. Max Attempts: "+a);let i=0,u=0,s=0;for(;i<t&&u<a&&s<l;u++){console.debug(`Digging. Holes: ${i}/${t}, Attempts: ${u}/${a}, Consecutive attempts: ${s}/`+l);var f=rando(0,e-1),d=rando(0,e-1);if(n[f][d]){var g=structuredClone(n),g=(g[f][d]=void 0,countSolutions(g,o));if(1<g){let e="Sudoku has more than one possible solution. ";++s>l?e+="Max consecutive attempts reached. Not retrying.":u<a?e+=`Retrying ${u+1}/`+a:e+="Max attempts reached. Not retrying.",console.debug(e)}else n[f][d]=void 0,i++}}return console.debug(`Dug ${i}/${t} holes. Took ${u}/${a} attemepts (last consecutive attempts: ${s}/${l}).`),n}function fill(e,t,r=0,o=0){if(r==e.length-1)return!0;for(var n of randoSequence(1,e.length))if(!isUnsafe(e,t,r,o,n)){e[r][o]=n;var[n,a]=o==e.length-1?[r+1,0]:[r,o+1];if(fill(e,t,n,a))return!0;e[r][o]=void 0}return!1}function countSolutions(t,r,o=0,n=0){if(o===t.length)return 1;var[a,l]=n===t.length-1?[o+1,0]:[o,n+1];if(t[o][n])return countSolutions(t,r,a,l);let i=0;for(let e=1;e<=t.length&&(isUnsafe(t,r,o,n,e)||(t[o][n]=e,i+=countSolutions(t,r,a,l),t[o][n]=void 0,!(1<i)));e++);return i}function isUnsafe(r,o,t,n,a){for(let e=0;e<r.length;e++)if(r[t][e]===a||r[e][n]===a)return!0;var l=Math.floor(t/o)*o,i=Math.floor(n/o)*o;for(let t=0;t<o;t++)for(let e=0;e<o;e++)if(r[l+t][i+e]===a)return!0;return!1}function displayBoard(e){for(var t of globalThis.htmlBoard.flat())t.value=e[Number(t.dataset.row)-1][Number(t.dataset.col)-1],void 0!==e[Number(t.dataset.row)-1][Number(t.dataset.col)-1]&&(t.disabled=!0)}export{generateSudoku,displayBoard};