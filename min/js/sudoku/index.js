import{bgColorSwitcher,DEFAULT_BOARD_SIZE,fgColorSwitcher,htmlBoard,loadingContainer,loadingContainerSiblings,numberOverviewSpans,regenerateBtn,shareBtn,solutionBtn}from"./constants.js";import{createHTMLBoard,generateSudoku,displayBoard,getNumberAmounts}from"./generateSudoku.js";import{generateShareURL,loadFromShareURL}from"./shareSudoku.js";import{setRootStyle,getRootStyle,invertHex,saveToClipboard,initializeColorPicker,clearTimer,checkErrors,updateMinMax}from"./utils.js";import __ from"./events.js";document.documentElement.removeAttribute("style"),initializeColorPicker(bgColorSwitcher,"sudoku-bg-color",e=>setRootStyle("--background-color",e)),initializeColorPicker(fgColorSwitcher,"sudoku-fg-color",e=>{setRootStyle("--foreground-color",e),setRootStyle("--foreground-color-inverted",invertHex(e))}),setRootStyle("--foreground-color-secondary-inverted",invertHex(getRootStyle("--foreground-color-secondary")));let shareEventListener,solutionEventListener;function updateBtnListeners(o,t){let r=!1;shareBtn.removeEventListener("click",shareEventListener),solutionBtn.removeEventListener("click",solutionEventListener),shareEventListener=async()=>{var e=globalThis.location.search?globalThis.location.href:generateShareURL(o,t);e!=globalThis.location.href&&globalThis.history.pushState({},"",e),await saveToClipboard(e)},solutionEventListener=e=>{if(r=!r)return console.debug("Showing solution."),displayBoard(t,htmlBoard,numberOverviewSpans,!0),e.target.textContent="Hide Solution";console.debug("Hiding solution."),displayBoard(o,htmlBoard,numberOverviewSpans,!1),e.target.textContent="Show Solution"},shareBtn.addEventListener("click",shareEventListener),solutionBtn.addEventListener("click",solutionEventListener)}function regenerate(e,o){var t;e&&(e.target.disabled=!0),o||((o=new URL(globalThis.location.href)).search="",globalThis.history.pushState({},"",o));for(t of loadingContainerSiblings)t.style.setProperty("visibility","hidden");loadingContainer.style.removeProperty("display"),clearTimer();var r,o=performance.now(),{size:n,minHoles:i,maxHoles:l,holes:a}=updateMinMax(),{fullBoard:l,board:i}=(globalThis.debugBoard?console.debug("Using debug board."):console.log(`Size: ${n}, Holes: ${a}/${l} (min: ${i})`),htmlBoard.length!=n&&(createHTMLBoard(globalThis.debugBoard?DEFAULT_BOARD_SIZE:n),htmlBoard.splice(0,-1,...[...document.querySelectorAll("#sudoku > tbody > tr")].map(e=>[...e.children].map(e=>e.firstChild)))),loadFromShareURL()??generateSudoku(n,a));globalThis.fullBoardNumberAmt=getNumberAmounts(l),displayBoard(i,htmlBoard,numberOverviewSpans),checkErrors(htmlBoard),console.debug(`Took ${performance.now()-o}ms to generate and render.`),setRootStyle("--sudoku-row-count",i.length),updateBtnListeners(i,l),loadingContainer.style.setProperty("display","none");for(r of loadingContainerSiblings)r.style.removeProperty("visibility");e&&(e.target.disabled=!1)}regenerateBtn.addEventListener("click",regenerate),regenerate(void 0,!0);