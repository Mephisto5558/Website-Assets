import{bgColorSwitcher,DEFAULT_BOARD_SIZE,fgColorSwitcher,htmlBoard,loadingContainer,MS_IN_SEC,numberOverviewSpans,regenerateBtn,shareBtn,solutionBtn}from"./constants.js";import{createHTMLBoard,displayBoard,getNumberAmounts}from"./generateSudoku.js";import{generateShareURL,loadFromShareURL}from"./shareSudoku.js";import{setRootStyle,getRootStyle,invertHex,saveToClipboard,initializeColorPicker,clearTimer,checkErrors,updateMinMax}from"./utils.js";import __ from"./events.js";let sudokuWorker=new Worker("./sudoku.worker.js");document.documentElement.removeAttribute("style"),initializeColorPicker(bgColorSwitcher,"sudoku-bg-color",e=>setRootStyle("--background-color",e)),initializeColorPicker(fgColorSwitcher,"sudoku-fg-color",e=>{setRootStyle("--foreground-color",e),setRootStyle("--foreground-color-inverted",invertHex(e))}),setRootStyle("--foreground-color-secondary-inverted",invertHex(getRootStyle("--foreground-color-secondary")));let shareEventListener,solutionEventListener;function updateBtnListeners(o,t){let r=!1;shareBtn.removeEventListener("click",shareEventListener),solutionBtn.removeEventListener("click",solutionEventListener),shareEventListener=async()=>{var e=globalThis.location.search?globalThis.location.href:generateShareURL(o,t);e!=globalThis.location.href&&globalThis.history.pushState({},"",e),await saveToClipboard(e)},solutionEventListener=e=>{if(r=!r)return console.debug("Showing solution."),displayBoard(t,htmlBoard,numberOverviewSpans,!0),e.target.textContent="Hide Solution";console.debug("Hiding solution."),displayBoard(o,htmlBoard,numberOverviewSpans,!1),e.target.textContent="Show Solution"},shareBtn.addEventListener("click",shareEventListener),solutionBtn.addEventListener("click",solutionEventListener)}let resolveFunction,showedLoading=(sudokuWorker.addEventListener("message",e=>{if("result"==e.data.type)return console.log("UI: Received result from worker."),resolveFunction?.(e.data.payload),resolveFunction=void 0;(console["progress"==e.data.type?"debug":e.data.type]??console.log)("Worker: "+e.data.message),"progress"==e.data.type&&(loadingContainer.children.namedItem("loading-status").textContent=e.data.message)}),sudokuWorker.addEventListener("error",e=>console.error("Worker: "+e.message)),!1);async function regenerate(e,o){e&&(e.target.disabled=!0),o||((o=new URL(globalThis.location.href)).search="",globalThis.history.pushState({},"",o));var o=setTimeout(()=>{showedLoading=!0,loadingContainer.classList.remove("hiding"),loadingContainer.style.removeProperty("display")},MS_IN_SEC/10),t=(clearTimer(),performance.now());let{size:r,minHoles:n,maxHoles:a,holes:s}=updateMinMax();globalThis.debugBoard?console.debug("Using debug board."):console.log(`Size: ${r}, Holes: ${s}/${a} (min: ${n})`),htmlBoard.length!=r&&(createHTMLBoard(globalThis.debugBoard?DEFAULT_BOARD_SIZE:r),htmlBoard.length=0,htmlBoard.push(...[...document.querySelectorAll("#sudoku > tbody > tr")].map(e=>[...e.children].map(e=>e.firstChild))));var{fullBoard:i,board:l}=loadFromShareURL()??await new Promise(e=>{resolveFunction=e,console.log("UI: Posting task to worker..."),sudokuWorker.postMessage({size:r,holes:s,debugBoard:globalThis.debugBoard})});globalThis.fullBoardNumberAmt=getNumberAmounts(i),setRootStyle("--sudoku-row-count",l.length),displayBoard(l,htmlBoard,numberOverviewSpans),checkErrors(htmlBoard),console.debug(`Took ${performance.now()-t}ms to generate and render.`),updateBtnListeners(l,i),clearTimeout(o),showedLoading?(loadingContainer.classList.add("hiding"),loadingContainer.addEventListener("animationend",()=>loadingContainer.style.display="none",{once:!0})):loadingContainer.style.display="none",e&&(e.target.disabled=!1)}regenerateBtn.addEventListener("click",regenerate),regenerate(void 0,!0);