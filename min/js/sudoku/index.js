import{bgColorSwitcher,cancelBtn,DEBUG_BOARDS,fgColorSwitcher,htmlBoard,loadingContainer,MS_IN_SEC,numberOverviewSpans,regenerateBtn,REPORT_PROD_WORKER_URL,shareBtn,solutionBtn,MAX_GENERATION_ATTEMPTS}from"./constants.js";import{createHTMLBoard,createHTMLOverviewSpans,displayBoard}from"./generateSudoku.js";import{generateShareURL,loadFromShareURL}from"./shareSudoku.js";import{setRootStyle,getRootStyle,invertHex,saveToClipboard,initializeColorPicker,clearTimer,checkErrors,updateMinMax,sendPopup}from"./utils.js";import __ from"./events.js";document.documentElement.removeAttribute("style"),initializeColorPicker(bgColorSwitcher,"sudoku-bg-color",e=>setRootStyle("--background-color",e)),initializeColorPicker(fgColorSwitcher,"sudoku-fg-color",e=>{setRootStyle("--foreground-color",e),setRootStyle("--foreground-color-inverted",invertHex(e))}),setRootStyle("--foreground-color-secondary-inverted",invertHex(getRootStyle("--foreground-color-secondary")));let shareEventListener,solutionEventListener;function updateBtnListeners(o,t){let r=!1;shareBtn.removeEventListener("click",shareEventListener),solutionBtn.removeEventListener("click",solutionEventListener),shareEventListener=async()=>{var e=globalThis.location.search?globalThis.location.href:generateShareURL(o,t);e!=globalThis.location.href&&globalThis.history.pushState({},"",e),await saveToClipboard(e)},solutionEventListener=e=>{(r=!r)?(console.debug("Showing solution."),displayBoard(t,htmlBoard,numberOverviewSpans,!0),e.target.textContent="Hide Solution"):(console.debug("Hiding solution."),displayBoard(o,htmlBoard,numberOverviewSpans,!1),e.target.textContent="Show Solution")},shareBtn.addEventListener("click",shareEventListener),solutionBtn.addEventListener("click",solutionEventListener)}let workerBlobURL;async function fetchScript(e){e=await fetch(e).then(e=>e.text());return URL.createObjectURL(new Blob([e],{type:"application/javascript"}))}let resolveFunction,rejectFunction;async function createSudokuWorker(){workerBlobURL??=await fetchScript(globalThis.debug?"./sudoku.worker.js":REPORT_PROD_WORKER_URL);var e=new Worker(workerBlobURL);return e.addEventListener("message",e=>{if("cancel"==e.data.type)return console.log(`UI: Canceling worker generation${e.data.message?" due to "+e.data.message:""}.`),sendPopup("Canceled"),rejectFunction?.(e.data);"result"==e.data.type?(console.log("UI: Received result from worker."),resolveFunction?.(e.data.payload),resolveFunction=void 0):((console["progress"==e.data.type?"debug":e.data.type]??console.log)("Worker: "+e.data.message),"progress"==e.data.type&&(loadingContainer.children.namedItem("loading-status").textContent=e.data.message))}),e.addEventListener("error",e=>console.error("Worker:",e)),e}let showedLoading=!1,isGenerating=!1;async function regenerate(e,o){if(!isGenerating){isGenerating=!0,e&&(e.target.disabled=!0),o?cancelBtn.classList.add("invisible"):((t=new URL(globalThis.location.href)).search="",globalThis.history.pushState({},"",t));var t=setTimeout(()=>{showedLoading=!0,loadingContainer.classList.remove("hiding","hidden")},MS_IN_SEC/10);try{clearTimer();var i=performance.now();let{size:r,minHoles:e,maxHoles:o,holes:n}=updateMinMax(),a=(globalThis.debugBoard?console.debug("Using debug board."):console.log(`Size: ${r}, Holes: ${n}/${o} (min: ${e})`),loadFromShareURL(globalThis.debugBoard?DEBUG_BOARDS.get(r):void 0));if(!a){let t=5*MS_IN_SEC+r**4;for(let o=1;o<=MAX_GENERATION_ATTEMPTS;o++){console.log(`UI: Starting generation attempt ${o}/${MAX_GENERATION_ATTEMPTS}...`),globalThis.sudokuWorker??=await createSudokuWorker();try{a=await Promise.race([new Promise((e,o)=>{resolveFunction=e,rejectFunction=o,console.log("UI: Posting task to worker..."),globalThis.sudokuWorker.postMessage({size:r,holes:n,debugBoard:globalThis.debugBoard})}),new Promise((e,o)=>setTimeout(()=>o(new Error(`Timeout after ${t}ms`)),t))]);break}catch(e){if(console.warn(`UI: Attempt ${o} failed. Reason: `+e.message),loadingContainer.children.namedItem("loading-status").textContent=`Attempt ${o}/${MAX_GENERATION_ATTEMPTS} failed. Retrying.`,globalThis.sudokuWorker.terminate(),delete globalThis.sudokuWorker,o>=MAX_GENERATION_ATTEMPTS)throw new Error("Failed to generate Sudoku after all attempts.")}}}var{fullBoard:s,board:l}=a;s.length!=htmlBoard.length&&(createHTMLBoard(s.length),htmlBoard.length=0,htmlBoard.push(...[...document.querySelectorAll("#sudoku > tbody > tr")].map(e=>[...e.children].map(e=>e.firstChild))),createHTMLOverviewSpans(s.length),numberOverviewSpans.length=0,numberOverviewSpans.push(...document.querySelectorAll("#number-overview > tbody > tr > td > span"))),setRootStyle("--sudoku-row-count",s.length),document.documentElement.dataset.sudokuBoxSize=Math.sqrt(s.length),displayBoard(l,htmlBoard,numberOverviewSpans),checkErrors(htmlBoard),console.debug(`Took ${performance.now()-i}ms to generate and render.`),updateBtnListeners(l,s)}catch(e){if("cancel"===e?.type)return console.log("UI: Generation was successfully canceled.");console.error("An error occurred during Sudoku generation:",e),sendPopup("Error","An unexpected error occurred during Sudoku generation. Please try again.")}finally{clearTimeout(t),showedLoading?(loadingContainer.classList.add("hiding"),loadingContainer.addEventListener("animationend",()=>loadingContainer.classList.add("hidden"),{once:!0})):loadingContainer.classList.add("hidden"),isGenerating=!1,resolveFunction=void 0,rejectFunction=void 0,e&&(e.target.disabled=!1),o&&cancelBtn.classList.remove("invisible")}}}regenerateBtn.addEventListener("click",regenerate),regenerate(void 0,!0);